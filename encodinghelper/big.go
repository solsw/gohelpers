package encodinghelper

import (
	"bytes"
	"errors"
	"math/big"
)

// BigIntToBuffer writes big.Int to bytes.Buffer.
func BigIntToBuffer(b *bytes.Buffer, bi *big.Int) {
	bb := BigIntMarshalBinary(bi)
	Int64ToBuffer(b, int64(len(bb)))
	b.Write(bb)
}

// BigIntFromBuffer reads big.Int from bytes.Buffer.
func BigIntFromBuffer(b *bytes.Buffer) (*big.Int, error) {
	len, err := Int64FromBuffer(b)
	if err != nil {
		return nil, err
	}
	bb := make([]byte, len)
	n, err := b.Read(bb)
	if err != nil {
		return nil, err
	}
	if int64(n) != len {
		return nil, errors.New("wrong big.Int length")
	}
	return BigIntUnmarshalBinary(bb), nil
}

// BigIntMarshalBinary encodes big.Int into a binary form.
func BigIntMarshalBinary(bi *big.Int) []byte {
	return bi.Bytes()
}

// BigIntUnmarshalBinary decodes big.Int from the binary form generated by BigIntMarshalBinary.
func BigIntUnmarshalBinary(data []byte) *big.Int {
	return (&big.Int{}).SetBytes(data)
}
