package encodinghelper

import (
	"bytes"
	"encoding/binary"
)

// Int64ToBuffer writes int64 to bytes.Buffer.
func Int64ToBuffer(b *bytes.Buffer, i64 int64) {
	binary.Write(b, binary.BigEndian, i64)
}

// Int64FromBuffer reads int64 from bytes.Buffer.
func Int64FromBuffer(b *bytes.Buffer) (int64, error) {
	var i64 int64
	if err := binary.Read(b, binary.BigEndian, &i64); err != nil {
		return 0, err
	}
	return i64, nil
}

// Int64MarshalBinary encodes int64 into a binary form.
func Int64MarshalBinary(i64 int64) []byte {
	b := &bytes.Buffer{}
	Int64ToBuffer(b, i64)
	return b.Bytes()
}

// Int64UnmarshalBinary decodes int64 from the binary form generated by Int64MarshalBinary.
func Int64UnmarshalBinary(data []byte) (int64, error) {
	return Int64FromBuffer(bytes.NewBuffer(data))
}
